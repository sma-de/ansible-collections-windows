---

## smabot_win_win_dockersetup_args:
##   task_name: ## optional
##   setup_args: ## mandatory
##   cleanup_job: ## optional
##   ##become: ## optional, default no

    ##
    ## note: as this role actually has no real code (tasks) to run here, 
    ##   we only just import its "namespace", in principle it would be 
    ##   much better to use the meta dir for this, but as we learned 
    ##   today, meta deps are not resolved / imported when this role 
    ##   itself is "executed" by import/include_role statement / task, but 
    ##   only when the high level playbook feature "roles:" is used, so 
    ##   to make sure deps are always resolved we actually must import 
    ##   them explicitly like this here
    ##
  - import_role:
      name: smabot.windows.common_lib


  - name: >-
     {{ smabot_win_win_dockersetup_args.task_name 
      | default('handle container/docker setup', True) }}

    smabot.windows.windocker_setup: >-
      {{ smabot_win_win_dockersetup_args.setup_args }}

    ## ##
    ## ## note: even if you use an admin account for your host connection, 
    ## ##   you still need to use become here for cap installing, but not 
    ## ##   for removing caps, I think the important difference here is 
    ## ##   that for install external resources need to be queried while 
    ## ##   for deinstallation only local resources are used
    ## ##
    ## ## TODO: is this still true (??), why is this section outcommented??
    ## ##
    ##become: "{{ win_capability_args.become | default('no', True) }}"
    register: _tmp_setup_res


  - block:

      - set_fact:
          _tmp_modargs:
             name: Cleanup Docker Storage

             description: >-
               Cleans the docker storage regularly by removing unused images
               and container zombies.

             ## show it in the task UI
             hidden: no

             ## allow starting it from the UI
             allow_demand_start: yes

             ## use latest version of task scheduler
             compatibility: 2 

             ## dont start other task instances while one is active
             multiple_instances: 2

             ## if task could not be started at scheduled time 
             ## because e.g. the server war rebootet, start it 
             ## later as soon as it is possible
             start_when_available: yes

             actions:

               - path: cmd.exe
                 arguments: /c docker system prune -af

             triggers:

               - type: weekly
                 days_of_week: sunday ## run sundays

                 ## note: date is meaningless here (indentently set 
                 ##   in the past), but we still need to specify 
                 ##   it so we can set a clock time to run this task
                 start_boundary: '2000-10-09T02:02:02'

                 enabled: yes

             username: SYSTEM

             state: present
             enabled: yes


      - set_fact:
          _tmp_modargs: >-
             {{ _tmp_modargs | combine(
                  smabot_win_win_dockersetup_args.cleanup_job, 
                  recursive=True
                )
             }}
        when: smabot_win_win_dockersetup_args.cleanup_job is mapping


      - name: setup docker cleaning job
        win_scheduled_task: "{{ _tmp_modargs }}"

    when: smabot_win_win_dockersetup_args.get('cleanup_job', False)


  - import_role:
      name: smabot.base.conditional_notify
    vars:
      conditional_notify_args:
        taskname: check if reboot is needed
        notify: "reboot os"
        condition: "{{ _tmp_setup_res.reboot_needed }}"

