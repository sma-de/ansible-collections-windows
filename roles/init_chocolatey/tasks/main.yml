---

##
## I'm pretty sure that the vanilla ansible chocolatey module already 
## handles bootstrapping of choco itself pretty well for default cases, 
## so by all means skip this role and use that if it works for you, this 
## is designed for edge cases where the standard method fails:
##
##    Szenario A) Your machine is behind a (corporate) proxy which messes 
##      up internet traffic so that standard method fails, at the same you 
##      have (working) access to a repository manager which functions as 
##      choco package server / proxy, for that case this role is optimal 
##      as it basically allows choco bootstrapping from arbitrary URLs / sources
##

## init_chocolatey_args:
##   sources:
##     ## if set disables the chocolatey default source
##     disable_default: false ## optional, defaults to true as normally it is not expected that this role is used if default source works fine for one
##     sources:
## 
##       - "list of source urls"
## 
##   ## note: atm actually does not really set install dir (which always 
##   ##   uses internal default), but is only used for existence testing
##   install_directory: ## optional, defaults to: C:\ProgramData\chocolatey
## 
## 
## 

  - name: check if chocolatey is already installed by searching $PATH for exe
    smabot.windows.command_info:
      command: choco
      type: Application
      expect_max: 1
    register: _res_find_choco


  - name: check if chocolatey is already installed by probing filepath
    ansible.windows.win_stat:
      path: "{{ init_chocolatey_args.install_directory | default('C:\\ProgramData\\chocolatey', True) }}/choco.exe"
    register: _res_choco_fp

    ## no reason applying this second test when first is enough
    when: _res_find_choco.command_info_single is falsy


  - block:

      - name: create tmpdir on target
        ansible.windows.win_tempfile:
          state: directory
        register: _res_tmpdir


      - name: copy choco install script to target
        ansible.windows.win_template:
          src: install_choco.ps1
          dest: "{{ _res_tmpdir.path }}/install_choco.ps1"


      - name: install chocolatey from script
        ansible.windows.win_command: powershell.exe -
        args:
          stdin: >-
            powershell -ExecutionPolicy ByPass 
            -File "{{ _res_tmpdir.path }}/install_choco.ps1" 
            '{{ init_chocolatey_args.sources.sources[0].url }}'

      - name: remove tmpdir from target
        ansible.windows.win_file:
          path: "{{ _res_tmpdir.path }}"
          state: absent
 
    ## run install choco script only if all existance test failed
    when: _res_find_choco.command_info_single is falsy and not _res_choco_fp.stat.exists


  - name: disable chocolatey default source
    win_chocolatey_source:
      name: chocolatey
      state: disabled
    when: init_chocolatey_args.sources.get('disable_default', True)


  - name: add custom choco source  ==>>  {{ _choco_src_iter.name }}
    win_chocolatey_source:
      name: '{{ _choco_src_iter.name }}'
      state: present
      source: '{{ _choco_src_iter.url }}'
    loop: >-
      {{ init_chocolatey_args.sources.sources }}
    loop_control:
      loop_var: _choco_src_iter

